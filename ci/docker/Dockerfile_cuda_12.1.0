# Ubuntu 20.04 ???
ARG BASE_IMAGE=nvcr.io/nvidia/cuda:12.1.0-cudnn8-devel-ubuntu22.04
ARG PYTHON_VERSION=3.10
ARG PYTORCH_VERSION=2.3.0
FROM ${BASE_IMAGE} AS python_base
ARG PYTHON_VERSION
ENV PYTHON_VERSION=${PYTHON_VERSION}

RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
    <<EOF
apt update -y
apt upgrade -y
apt-get install -qyy \
    -o APT::Install-Recommends=false \
    -o APT::Install-Suggests=false \
    build-essential \
    ca-certificates \
    curl \
    software-properties-common \
    git \
    ninja-build \
    cmake \
    openmpi-bin \
    libopenmpi-dev \
    checkinstall \
    libreadline-gplv2-dev \
    libncursesw5-dev \
    libssl-dev \
    libsqlite3-dev \
    tk-dev \
    libgdbm-dev \
    libc6-dev \
    libbz2-dev \
    libffi-dev \
    zlib1g-dev

rm -rf /var/lib/apt/lists/*
EOF

WORKDIR /build/python
RUN <<EOF

wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz
tar -zxf Python-${PYTHON_VERSION}.tgz
cd Python-${PYTHON_VERSION}
./configure --enable-optimizations --prefix=/usr
make
make install
EOF

#COPY --from=ghcr.io/astral-sh/uv:latest /uv /usr/local/bin/uv
#
## - Silence uv complaining about not being able to use hard links,
## - tell uv to byte-compile packages for faster application startups,
## - prevent uv from accidentally downloading isolated Python builds,
## - pick a Python,
## - and finally declare `/venv` as the target for `uv sync`.
#ENV UV_LINK_MODE=copy \
#    UV_COMPILE_BYTECODE=1 \
#    UV_PYTHON=python3.10 \
#    UV_PYTHON_DOWNLOADS=never \
#    UV_PROJECT_ENVIRONMENT=/venv
#
#
FROM python_base AS pytorch_base
ARG PYTORCH_VERSION
ENV PYTORCH_VERSION=${PYTORCH_VERSION}

RUN pip install torch==${PYTORCH_VERSION}
